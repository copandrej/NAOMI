apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: ray-serve
spec:
  # this is example serving config, here we need to put some placeholder text return serving
  serveConfigV2: |
    applications:
      - name: Test
        import_path: test.deployment
        route_prefix: /test
        runtime_env:
          working_dir: "https://github.com/copandrej/Self-Evolving-AIML-Workflow/raw/132c1cea1ed1afffde6b8cdd20390e6244d14e95/conf/kube_conf/ray/placeholder.zip"
        deployments:
          - name: Hello
            num_replicas: 1
            ray_actor_options:
              num_cpus: 0
  rayClusterConfig:
    rayVersion: '2.10.0' # Should match the Ray version in the image of the containers
    #############auto scaler copied from https://github.com/ray-project/kuberay/blob/5b1a5a11f5df76db2d66ed332ff0802dc3bbff76/ray-operator/config/samples/ray-cluster.autoscaler.yaml ############################
    enableInTreeAutoscaling: true
    # `autoscalerOptions` is an OPTIONAL field specifying configuration overrides for the Ray Autoscaler.
    # The example configuration shown below below represents the DEFAULT values.
    # (You may delete autoscalerOptions if the defaults are suitable.)
    autoscalerOptions:
      # `upscalingMode` is "Default" or "Aggressive."
      # Conservative: Upscaling is rate-limited; the number of pending worker pods is at most the size of the Ray cluster.
      # Default: Upscaling is not rate-limited.
      # Aggressive: An alias for Default; upscaling is not rate-limited.
      upscalingMode: Default
      # `idleTimeoutSeconds` is the number of seconds to wait before scaling down a worker pod which is not using Ray resources.
      idleTimeoutSeconds: 30
      # `image` optionally overrides the Autoscaler's container image. The Autoscaler uses the same image as the Ray container by default.
      ## image: "my-repo/my-custom-autoscaler-image:tag"
      # `imagePullPolicy` optionally overrides the Autoscaler container's default image pull policy (IfNotPresent).
      imagePullPolicy: IfNotPresent
      # Optionally specify the Autoscaler container's securityContext.
      securityContext: { }
      env: [ ]
      envFrom: [ ]
      # resources specifies optional resource request and limit overrides for the Autoscaler container.
      # The default Autoscaler resource limits and requests should be sufficient for production use-cases.
      # However, for large Ray clusters, we recommend monitoring container resource usage to determine if overriding the defaults is required.
      resources:
        limits:
          cpu: "500m"
          memory: "512Mi"
        requests:
          cpu: "500m"
          memory: "512Mi"

    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      # The `rayStartParams` are used to configure the `ray start` command.
      # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
      # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0" # we don't want training and serving to get scheduled on head
      # Pod template
      template:
        spec:
          containers:
          - name: ray-head
            image: copandrej/ijs-custom:ray-amd64-ray210
            ports:
            - containerPort: 6379
              name: gcs
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
              - mountPath: /tmp/ray
                name: ray-logs
            resources:
              limits:
                cpu: "2"
                memory: "6G"
              requests:
                cpu: "2"
                memory: "6G"
            env:
              - name: RAY_GRAFANA_IFRAME_HOST
                valueFrom: # kubectl create configmap grafana-ip --from-literal=GRAFANA_IP="http://193.2.205.27:30000" -n ray-system
                  configMapKeyRef:
                    key: GRAFANA_IP
                    name: grafana-ip
              - name: RAY_GRAFANA_HOST
                value: http://prometheus-grafana.prometheus-system.svc:80
              - name: RAY_PROMETHEUS_HOST
                value: http://prometheus-kube-prometheus-prometheus.prometheus-system.svc:9090
          volumes:
            - name: ray-logs
              emptyDir: {}
          nodeSelector:
            kubernetes.io/arch: "amd64"
    workerGroupSpecs:
    # The pod replias in this group typed worker
    - replicas: 1
      minReplicas: 1
      maxReplicas: 1
      groupName: amd-group
      rayStartParams:
        num-cpus: "4"
        resources: "'{\"vm\": 1}'"
      # Pod template
      template:
        spec:
          containers:
          - name: ray-worker
            image: copandrej/ijs-custom:ray-amd64-ray210
            resources:
              limits:
                cpu: 4
                memory: "6G"
              requests:
                cpu: 4
                memory: "6G"
          nodeSelector:
            kubernetes.io/arch: "amd64"
    # maxReplicas should equal to the number of raspberry pi 5 nodes, adjust as needed
    - replicas: 0
      minReplicas: 0
      maxReplicas: 0
      groupName: aarch-group
      rayStartParams:
        num-cpus: "3"
        resources: "'{\"rasp\": 1}'"
      # Pod template
      template:
        spec:
          containers:
          - name: ray-worker
            image: copandrej/ijs-custom:ray-aarch64-ray210
            resources:
              limits:
                cpu: "3.75"
                memory: "5.5G"
              requests:
                cpu: "3.75"
                memory: "5.5G"
          nodeSelector:
            kubernetes.io/arch: "arm64"
