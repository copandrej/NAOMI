apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: ray-serve
spec:
  # this is example serving config, here we need to put some placeholder text return serving
  serveConfigV2: |
    applications:
      - name: Test
        import_path: test.deployment
        route_prefix: /test
        runtime_env:
          working_dir: "https://github.com/copandrej/Self-Evolving-AIML-Workflow/raw/132c1cea1ed1afffde6b8cdd20390e6244d14e95/conf/kube_conf/ray/placeholder.zip"
        deployments:
          - name: Hello
            num_replicas: 1
            ray_actor_options:
              num_cpus: 0
  rayClusterConfig:
    rayVersion: '2.10.0' # Should match the Ray version in the image of the containers
    #############auto scaler copied from https://github.com/ray-project/kuberay/blob/5b1a5a11f5df76db2d66ed332ff0802dc3bbff76/ray-operator/config/samples/ray-cluster.autoscaler.yaml ############################
    enableInTreeAutoscaling: false

    ######################headGroupSpecs#################################
    # Ray head pod template.
    headGroupSpec:
      rayStartParams:
        dashboard-host: '0.0.0.0'
        num-cpus: "0" # we don't want training and serving to get scheduled on head
      # Pod template
      template:
        spec:
          containers:
            - name: ray-head
              image: {{ .Values.headGroupSpecs.rayHead.image }}
              ports:
                - containerPort: 6379
                  name: gcs
                - containerPort: 8265
                  name: dashboard
                - containerPort: 10001
                  name: client
                - containerPort: 8000
                  name: serve
              volumeMounts:
                - mountPath: /tmp/ray
                  name: ray-logs
              resources:
                limits:
                  cpu: "{{ .Values.headGroupSpecs.rayHead.resources.limits.cpu }}"
                  memory: "{{ .Values.headGroupSpecs.rayHead.resources.limits.memory }}"
                requests:
                  cpu: "{{ .Values.headGroupSpecs.rayHead.resources.requests.cpu }}"
                  memory: "{{ .Values.headGroupSpecs.rayHead.resources.requests.memory }}"
              env:
                - name: RAY_GRAFANA_IFRAME_HOST
                  valueFrom:
                    configMapKeyRef:
                      key: GRAFANA_IP
                      name: grafana-ip
                - name: RAY_GRAFANA_HOST
                  value: http://{{ .Release.Name }}-grafana
                - name: RAY_PROMETHEUS_HOST
                  value: http://{{ .Release.Name }}-kube-prometheus-stack-prometheus:9090
          volumes:
            - name: ray-logs
              emptyDir: {}
          nodeSelector:
            kubernetes.io/arch: "amd64"

  workerGroupSpecs:
    - replicas: {{ .Values.workerGroups.amdGroup.replicas }}
      minReplicas: {{ .Values.workerGroups.amdGroup.minReplicas }}
      maxReplicas: {{ .Values.workerGroups.amdGroup.maxReplicas }}
      groupName: amd-group
      rayStartParams:
        num-cpus: "{{ .Values.workerGroups.amdGroup.rayStartParams.numCpus }}"
        resources: "'{\"vm\": 1}'"
      template:
        spec:
          containers:
            - name: ray-worker
              image: {{ .Values.workerGroups.amdGroup.container.image }}
              resources:
                limits:
                  cpu: "{{ .Values.workerGroups.amdGroup.container.resources.limits.cpu }}"
                  memory: "{{ .Values.workerGroups.amdGroup.container.resources.limits.memory }}"
                requests:
                  cpu: "{{ .Values.workerGroups.amdGroup.container.resources.requests.cpu }}"
                  memory: "{{ .Values.workerGroups.amdGroup.container.resources.requests.memory }}"
          nodeSelector:
            kubernetes.io/arch: "amd64"

    - replicas: {{ .Values.workerGroups.aarchGroup.replicas }}
      minReplicas: {{ .Values.workerGroups.aarchGroup.minReplicas }}
      maxReplicas: {{ .Values.workerGroups.aarchGroup.maxReplicas }}
      groupName: aarch-group
      rayStartParams:
        num-cpus: "{{ .Values.workerGroups.aarchGroup.rayStartParams.numCpus }}"
        resources: "'{\"rasp\": 1}'"
      template:
        spec:
          containers:
            - name: ray-worker
              image: {{ .Values.workerGroups.aarchGroup.container.image }}
              resources:
                limits:
                  cpu: "{{ .Values.workerGroups.aarchGroup.container.resources.limits.cpu }}"
                  memory: "{{ .Values.workerGroups.aarchGroup.container.resources.limits.memory }}"
                requests:
                  cpu: "{{ .Values.workerGroups.aarchGroup.container.resources.requests.cpu }}"
                  memory: "{{ .Values.workerGroups.aarchGroup.container.resources.requests.memory }}"
          nodeSelector:
            kubernetes.io/arch: "arm64"
